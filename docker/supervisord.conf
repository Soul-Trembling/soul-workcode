[supervisord]
nodaemon=true
logfile = /var/log/app/supervisor.log

[program:nginx]
command = /usr/sbin/nginx
stdout_logfile=/var/log/app/nginx.log
redirect_stderr=true
stopasgroup=true

[program:web]
process_name=web_%(process_num)s
environment=PYTHONPATH="/app"
directory=/app
command=python manager.py --cmd=runserver --port=%(process_num)s

numprocs = 4
numprocs_start = 9001
startsecs = 10

autostart=true
autorestart=true

priority=999
killasgroup=true

stdout_logfile=/var/log/app/web.log
stderr_logfile=/var/log/app/web.log

[group:celery]
programs=worker,beat
priority=999

[program:worker]
command=python celery_tasks.py worker --loglevel=INFO --autoscale=10,3 --autoreload --hostname=celery@%%h
directory=/app
user=root
numprocs=1
stdout_logfile=/var/log/app/celery_worker.log
stderr_logfile=/var/log/app/celery_worker.log
autostart=true
autorestart=true
startsecs=10

; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
stopwaitsecs = 600

; When resorting to send SIGKILL to the program to terminate it
; send SIGKILL to its whole process group instead,
; taking care of its children as well.
killasgroup=true

; if rabbitmq is supervised, set its priority higher
; so it starts first
priority=500

[program:beat]
command=python celery_tasks.py beat --schedule /var/lib/celery_beat.db --pidfile /var/run/celery_beat.pid --loglevel=INFO
directory=/app
user=root
numprocs=1
stdout_logfile=/var/log/app/celery_beat.log
stderr_logfile=/var/log/app/celery_beat.log
autostart=true
autorestart=true
startsecs=10

; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
stopwaitsecs = 600

; When resorting to send SIGKILL to the program to terminate it
; send SIGKILL to its whole process group instead,
; taking care of its children as well.
killasgroup=true

; if rabbitmq is supervised, set its priority higher
; so it starts first
priority=500
